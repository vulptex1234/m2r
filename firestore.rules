// Firestore Security Rules for IoT Temperature Control System
// Optimized for client-side processing with proper security

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(resource) {
      return request.auth != null && request.auth.uid == resource.data.owner;
    }

    function isValidMeasurement(data) {
      return data.keys().hasAll(['nodeId', 'observedC']) &&
             data.nodeId is string &&
             data.nodeId.size() > 0 &&
             data.observedC is number &&
             data.observedC >= -50 &&
             data.observedC <= 100;
    }

    function isValidNodeId(nodeId) {
      // Allow alphanumeric, hyphens, underscores, max 50 chars
      return nodeId is string &&
             nodeId.size() > 0 &&
             nodeId.size() <= 50 &&
             nodeId.matches('[a-zA-Z0-9_-]+');
    }

    function rateLimit() {
      // Simple rate limiting: max 1 write per 5 seconds per node
      // In production, implement more sophisticated rate limiting
      return true;
    }

    // ========== Raw Measurements Collection ==========
    // IoT devices write here, client-side processing reads
    match /rawMeasurements/{docId} {
      // Allow reads for client-side processing
      allow read: if true; // Public read for demo - restrict in production

      // Allow writes from IoT devices with validation
      allow create: if isValidMeasurement(request.resource.data) &&
                   isValidNodeId(request.resource.data.nodeId) &&
                   rateLimit();

      // No updates or deletes allowed
      allow update, delete: if false;
    }

    // ========== Control States Collection ==========
    // Stores current control state for each node
    match /controlStates/{nodeId} {
      // Allow reads for dashboard
      allow read: if true; // Public read for demo

      // Allow writes from client-side processor
      allow write: if isValidNodeId(nodeId) &&
                   request.resource.data.keys().hasAll(['nodeId', 'targetRate']) &&
                   request.resource.data.targetRate in ['LOW', 'MEDIUM', 'HIGH'];
    }

    // ========== Measurements Collection ==========
    // Processed measurement data
    match /measurements/{docId} {
      // Allow reads for dashboard and analytics
      allow read: if true; // Public read for demo

      // Allow writes from client-side processor
      allow create: if request.resource.data.keys().hasAll(['nodeId', 'observedC', 'targetRate']) &&
                   isValidNodeId(request.resource.data.nodeId) &&
                   request.resource.data.observedC is number &&
                   request.resource.data.targetRate in ['LOW', 'MEDIUM', 'HIGH'];

      // No updates allowed, deletes only for cleanup
      allow update: if false;
      allow delete: if true; // Allow cleanup - restrict in production
    }

    // ========== Score Logs Collection ==========
    // Statistical analysis logs
    match /scoreLogs/{docId} {
      // Allow reads for analytics
      allow read: if true; // Public read for demo

      // Allow writes from client-side processor
      allow create: if request.resource.data.keys().hasAll(['nodeId', 'sErr', 'targetRate']) &&
                   isValidNodeId(request.resource.data.nodeId) &&
                   request.resource.data.sErr is number &&
                   request.resource.data.targetRate in ['LOW', 'MEDIUM', 'HIGH'];

      // No updates allowed, deletes only for cleanup
      allow update: if false;
      allow delete: if true; // Allow cleanup - restrict in production
    }

    // ========== Forecast Snapshots Collection ==========
    // Weather forecast cache
    match /forecastSnapshots/{docId} {
      // Allow reads for all clients
      allow read: if true;

      // Allow writes from client-side weather service
      allow write: if docId == 'latest' &&
                   request.resource.data.keys().hasAll(['forecastC', 'provider']) &&
                   request.resource.data.forecastC is number &&
                   request.resource.data.forecastC >= -50 &&
                   request.resource.data.forecastC <= 100;
    }

    // ========== User Data Collections (if authentication is added) ==========
    match /users/{userId} {
      allow read, write: if isAuthenticated() && request.auth.uid == userId;
    }

    match /userSettings/{userId} {
      allow read, write: if isAuthenticated() && request.auth.uid == userId;
    }

    // ========== Admin Collections (restrict in production) ==========
    match /systemConfig/{docId} {
      allow read: if true; // Public read for configuration
      allow write: if false; // No writes allowed - use Firebase console
    }

    match /logs/{docId} {
      allow read: if true; // Public read for demo
      allow create: if true; // Allow logging
      allow update, delete: if false;
    }

    // ========== Default Deny ==========
    // Explicitly deny access to any other collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

/*
 * ========== Production Security Recommendations ==========
 *
 * 1. Authentication:
 *    - Implement Firebase Authentication
 *    - Replace 'if true' with proper authentication checks
 *    - Use custom claims for role-based access
 *
 * 2. Rate Limiting:
 *    - Implement proper rate limiting per node/user
 *    - Use Cloud Functions for complex validation
 *    - Monitor usage patterns
 *
 * 3. Data Validation:
 *    - Add more strict validation rules
 *    - Validate data ranges and formats
 *    - Check for required fields
 *
 * 4. Access Control:
 *    - Restrict read access to authenticated users
 *    - Implement node ownership model
 *    - Add admin roles for system management
 *
 * 5. Monitoring:
 *    - Set up Firebase security rules monitoring
 *    - Log security events
 *    - Alert on unusual patterns
 *
 * Example production rules for measurements:
 *
 * match /measurements/{docId} {
 *   allow read: if isAuthenticated() &&
 *              (isOwner(resource) || hasRole('admin'));
 *
 *   allow create: if isAuthenticated() &&
 *                isValidMeasurement(request.resource.data) &&
 *                userOwnsNode(request.resource.data.nodeId) &&
 *                respectsRateLimit();
 * }
 */